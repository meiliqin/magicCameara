precision highp float;
 varying highp vec2 textureCoordinate;
 
 uniform sampler2D inputImageTexture;
 uniform sampler2D inputImageTexture2;
 uniform sampler2D inputImageTexture3;
 uniform sampler2D inputImageTexture4;
 uniform sampler2D inputImageTexture5;

 
 uniform lowp vec2 p_left;
 uniform lowp vec2 p_right;
 uniform lowp vec2 p_top;
 uniform lowp vec2 p_bottom;
 uniform lowp vec2 p_eyea;
 uniform lowp vec2 p_eyeb;
 uniform lowp vec2 p_nose;
 uniform lowp vec2 p_faceleft;
 uniform lowp vec2 p_faceright;
 uniform lowp vec2 p_eyea_up;
 uniform lowp vec2 p_eyea_down;
 uniform lowp vec2 p_eyeb_up;
 uniform lowp vec2 p_eyeb_down;
 uniform lowp vec2 p_eyea_left;
 uniform lowp vec2 p_eyea_right;
 uniform lowp vec2 p_eyeb_left;
 uniform lowp vec2 p_eyeb_right;
 uniform lowp float m_time;
 uniform lowp float m_detect;
 
 
vec4 blendNormal(vec4 c1, vec4 c2) {
    vec4 outputColor;
    outputColor.r = c1.r + c2.r * c2.a * (1.0 - c1.a);
    outputColor.g = c1.g + c2.g * c2.a * (1.0 - c1.a);
    outputColor.b = c1.b + c2.b * c2.a * (1.0 - c1.a);
    outputColor.a = c1.a + c2.a * (1.0 - c1.a);
    return outputColor;
}

 
 float fadeIn(float fade_x, float fade_y, float time)
 {
     float f_time = m_time;
     if(m_time>time)
         f_time = time;
     float value = (fade_y-fade_x)*f_time/time + fade_x;
     return value;
 }
 
 
 void main(){
     
     gl_FragColor = texture2D(inputImageTexture,textureCoordinate);
     
     
     vec4 bigMouth = vec4(1.0,0.0,0.0,0.0);
     
     
     
     float aspect = 0.5625;
     vec2 newCoord = vec2(0.0,0.0);
     float weight = 0.0;
     vec2 target = p_left;
     float face_width = abs(p_eyea.x - p_eyeb.x) * 2.0;
     vec2 resize = vec2(face_width*0.8,face_width*1.3);
     vec2 mouthcenter = (p_left+p_right)*0.5;
     
    
         

     
      
      if(m_detect > 0.0 )
      {
      float eyedis = distance(p_eyea,p_eyeb);
      target = (p_eyea + p_eyeb)*0.5;
      resize = vec2(eyedis*2.0, eyedis*0.7)*7.0;
      
      // face1
      
      vec2 tt = (p_faceleft + p_left)*0.5;
      aspect = 0.6;
      float aa = 1.0;
      float bb =abs(p_left.x-p_right.x)*0.5;
      float dis_eye1 = distance(vec2(textureCoordinate.x*aspect,textureCoordinate.y), vec2(tt.x*aspect,tt.y));
      if(dis_eye1 <= bb)
      {
      weight = dis_eye1 /bb;
      weight = aa*weight*(weight - 1.0)+1.0;
      newCoord.x = tt.x +(textureCoordinate.x - tt.x) * weight;
      newCoord.y = tt.y +(textureCoordinate.y - tt.y) * weight;
      
      gl_FragColor = texture2D(inputImageTexture, newCoord);
      bigMouth = gl_FragColor;
      
      }

// face2
      
      tt = (p_faceright + p_right)*0.5;
      float dis_eye2 = distance(vec2(textureCoordinate.x*aspect,textureCoordinate.y), vec2(tt.x*aspect,tt.y));
      if(dis_eye2 <= bb)
      {
          if(bigMouth.a>0.0)
          {
              vec2 tt = (p_faceleft + p_left)*0.5;
              weight = dis_eye1 /bb;
              weight = aa*weight*(weight - 1.0)+1.0;
              newCoord.x = tt.x +(textureCoordinate.x - tt.x) * weight;
              newCoord.y = tt.y +(textureCoordinate.y - tt.y) * weight;
              
              tt = (p_faceright + p_right)*0.5;
              weight = dis_eye2 /bb;
              weight = aa*weight*(weight - 1.0)+1.0;
              newCoord.x = tt.x +(newCoord.x - tt.x) * weight;
              newCoord.y = tt.y +(newCoord.y - tt.y) * weight;

          }
          else
          {
              weight = dis_eye2 /bb;
              weight = aa*weight*(weight - 1.0)+1.0;
              newCoord.x = tt.x +(textureCoordinate.x - tt.x) * weight;
              newCoord.y = tt.y +(textureCoordinate.y - tt.y) * weight;
          }
          gl_FragColor = texture2D(inputImageTexture, newCoord);
      
      }
      
      if(m_detect>1.9)
      {
          resize.x = resize.x*0.8;
      if(textureCoordinate.x<=(target.x+resize.x*0.5) && textureCoordinate.x>(target.x-resize.x*0.5) &&
      textureCoordinate.y<=(target.y+resize.y*0.5) && textureCoordinate.y>(target.y-resize.y*0.5))
      {
      float x_coord = (textureCoordinate.x-target.x+resize.x*0.5)/resize.x;
      float y_coord = (textureCoordinate.y-target.y+resize.y*0.5)/resize.y;
      
      vec2 coordUse = vec2(x_coord,y_coord);
      
      
      float signx = 3.0*(p_eyea.y - p_eyeb.y)/distance(p_eyea,p_eyeb);
      float cosignx = 1.0*(p_eyea.x - p_eyeb.x)/distance(p_eyea,p_eyeb);
      vec2 rot1 = vec2(cosignx,1.0*signx);
      vec2 rot2 = vec2(-1.0*signx,cosignx);
      mat2 rot = mat2(rot1,rot2);
      coordUse = (coordUse-vec2(0.5,0.5))* rot;
      coordUse = coordUse + vec2(0.5,0.5);
      
      vec4 pickSample = texture2D(inputImageTexture2, coordUse);
      gl_FragColor = blendNormal(pickSample, gl_FragColor);
      }
          
          
          
          
          
          target = p_nose + (p_top - p_nose)*0.25;
          target.x = target.x + face_width*0.05;
          resize = vec2(face_width*1.0,face_width*0.8625)*0.7;
          
          if(textureCoordinate.x<=(target.x+resize.x*0.5) && textureCoordinate.x>(target.x-resize.x*0.5) &&
             textureCoordinate.y<=(target.y+resize.y*0.5) && textureCoordinate.y>(target.y-resize.y*0.5))
          {
              float x_coord = ((textureCoordinate.x-target.x+resize.x*0.5)/resize.x)/2.0;
              float y_coord = ((textureCoordinate.y-target.y+resize.y*0.5)/resize.y)/2.0;
              vec2 coordUse = vec2( x_coord, y_coord );
              
              float fire = fract(m_time);
              if(fire < 1.0/8.0)
                  coordUse = vec2(x_coord + 0.0/2.0, y_coord + 0.0/2.0);
              else if(fire < 2.0/8.0)
                  coordUse = vec2(x_coord + 1.0/2.0, y_coord + 0.0/2.0);
              else if(fire < 3.0/8.0)
                  coordUse = vec2(x_coord + 0.0/2.0, y_coord + 1.0/2.0);
              else if(fire < 4.0/8.0)
                  coordUse = vec2(x_coord + 1.0/2.0, y_coord + 1.0/2.0);
              else if(fire < 5.0/8.0)
                  coordUse = vec2(x_coord + 0.0/2.0, y_coord + 0.0/2.0);
              else if(fire < 6.0/8.0)
                  coordUse = vec2(x_coord + 1.0/2.0, y_coord + 0.0/2.0);
              else if(fire < 7.0/8.0)
                  coordUse = vec2(x_coord + 0.0/2.0, y_coord + 1.0/2.0);
              else
                  coordUse = vec2(x_coord + 1.0/2.0, y_coord + 1.0/2.0);
              
              vec4 pickSample = texture2D(inputImageTexture5, coordUse);
              gl_FragColor = blendNormal(pickSample, gl_FragColor);
          }
          
          
      }

target = (p_eyea + p_eyeb)*0.5;
      target.y = target.y + eyedis;
      resize = vec2(eyedis*2.5, eyedis*1.5)*2.0;
      
      if(textureCoordinate.x<=(target.x+resize.x*0.5) && textureCoordinate.x>(target.x-resize.x*0.5) &&
      textureCoordinate.y<=(target.y+resize.y*0.5) && textureCoordinate.y>(target.y-resize.y*0.5))
      {
      float x_coord = (textureCoordinate.x-target.x+resize.x*0.5)/resize.x;
      float y_coord = (textureCoordinate.y-target.y+resize.y*0.5)/resize.y;
      
      vec2 coordUse2 = vec2(x_coord,y_coord);
      
      float signx = 2.0*(p_eyea.y - p_eyeb.y)/distance(p_eyea,p_eyeb);
      float cosignx = 1.0*(p_eyea.x - p_eyeb.x)/distance(p_eyea,p_eyeb);
      vec2 rot1 = vec2(cosignx,-1.0*signx);
      vec2 rot2 = vec2(1.0*signx,cosignx);
      mat2 rot = mat2(rot1,rot2);
      coordUse2 = (coordUse2-vec2(0.5,0.5))* rot;
      coordUse2 = coordUse2 + vec2(0.5,0.5);
      
      
      
      vec4 pickSample = texture2D(inputImageTexture3, coordUse2);
      gl_FragColor = blendNormal(pickSample, gl_FragColor);
      
      }
          
          
          
          target = p_nose;
          resize = vec2(face_width,face_width*0.5625)*0.8;
          
          if(textureCoordinate.x<=(target.x+resize.x*0.5) && textureCoordinate.x>(target.x-resize.x*0.5) &&
             textureCoordinate.y<=(target.y+resize.y*0.5) && textureCoordinate.y>(target.y-resize.y*0.5))
          {
              float x_coord = (textureCoordinate.x-target.x+resize.x*0.5)/resize.x;
              float y_coord = (textureCoordinate.y-target.y+resize.y*0.5)/resize.y;
              vec2 coordUse = vec2( x_coord, y_coord );
              
              
              vec4 pickSample = texture2D(inputImageTexture4, coordUse);
              gl_FragColor = blendNormal(pickSample, gl_FragColor);          }

      
      }
}
